; AddTwo.asm - adds two 32-bit integers.
; Chapter 3 example

.386
.model flat, stdcall
.stack 4096
ExitProcess PROTO, dwExitCode:DWORD
include Irvine32.inc

.data
;==============================================================================
input_string_msg			db "Enter a password: ", 0
input_function_msg			db 'Enter a password: ', 0
no_special_char				db 'Your password is lacking a special character',0Ah, 0Dh, 0
no_upper_char				db 'Your password is lacking an uppercase character',0
pass_short					db 'Password too short!',0Ah, 0Dh, 0
pass_long					db 'Password too long!',0Ah, 0Dh, 0
no_Upper_Msg				db 'Pasword must have a uppercase character',0Ah, 0Dh, 0
no_Lower_Msg				db 'Pasword must have a lowercase character',0Ah, 0Dh, 0
no_Number_Msg				db 'Pasword must have a number',0Ah, 0Dh, 0
no_Special_Msg				db 'Pasword must have a special character',0Ah, 0Dh, 0
Test_msg					db 'Good job!',0Ah, 0Dh, 0
special_chars				db "?@*()+{}&â€™_^[]\|", 0	
eek_msg						db "Too many passwords", 0
Redo_msg					db 'Password is identical. Please <enter> new password', 0

;==============================================================================
gold_user_password				db 24 dup (0)
user_password					db 24 dup (0)
old_user_password				db 24 dup (0)
old_old_user_password			db 24 dup (0)
old_old_old_user_password		db 24 dup (0)
old_old_old_old_user_password	db 24 dup (0)
password_length					db		?
old_password_length				dd		?
old_old_password_length			dd		?
old_old_old_password_length		dd		?
old_old_old_old_password_length	dd		?
;==============================================================================

.code
main PROC

	mov dl, 4
main_outer_loop:
	push dx
	xor edx, edx
	

String_Input:
	mov edx, offset input_string_msg
	call WriteString
	mov ecx, 24
	mov edx, offset user_password
	call readstring
	mov password_length, al
	jmp password_check

;==============ERRORS====================
p2s_error:
	mov edx, offset pass_short
	call writestring
	jmp String_Input
p2l_error:
	mov edx, offset pass_long
	call writestring
	jmp String_Input
no_number:
	mov edx, offset no_Number_Msg
	call writestring
	jmp String_Input
no_Upper:
	mov edx, offset no_Upper_Msg
	call writestring
	jmp String_Input
no_Lower:
	mov edx, offset no_Lower_Msg
	call writestring
	jmp String_Input
no_special:
	mov edx, offset no_Special_Msg
	call writestring
	jmp String_Input
eek:
	mov edx, offset eek_msg
	call writestring
	jmp String_Input
;==============Length======================
password_check:
;password too short / too long
	cmp eax, 0Ah
	jl p2s_error
	cmp eax, 16h
	jg p2l_error

;==============Number================
number:
	mov esi, 0
	mov cl, password_length
	mov edx, offset user_password
number_Loop:
	mov ebx, [edx]
	cmp bl, 30h
	jb increment_upper
	cmp bl, 39h
	jbe upper
	jcxz no_Number
	jmp increment_Number
increment_Number:
	inc edx
	dec cl
	jcxz no_Number
	jmp number_Loop
;==============Upper Letter================
upper:
	mov esi, 0
	mov cl, password_length
	mov edx, offset user_password
upper_Loop:
	mov ebx, [edx * 1]
	cmp bl, 'A'
	jb increment_upper
	cmp bl, 'Z'
	jbe lower
	cmp cl, 0
	jz no_Upper
	jmp increment_Upper
increment_upper:
	inc edx
	dec cl
	cmp cl, 0
	jz no_Upper
	jmp upper_Loop
;=============Lower Letter================
lower:
	mov esi, 0
	mov cl, password_length
	mov edx, offset user_password
lower_Loop:
	mov ebx, [edx + esi]
	cmp bl, 'a'
	jb increment_Lower
	cmp bl, 'z'
	jbe special
	cmp cl, 0
	jz no_Lower
	jmp increment_Lower
increment_Lower:
	inc esi
	dec cl
	cmp cl, 0
	jz no_Lower
	jmp lower_Loop
;==============Special Character===============
special:
	;mov esi, 0
	mov cl, password_length
	mov edx, offset user_password

outer_Loop:
	push cx
	mov ebx, [edx * 1]
	mov esi, offset special_chars
	mov cl, 16
inside_Loop:
	mov al, BYTE PTR [esi]
	cmp bl, al
	je copy
	inc esi
	dec cl
	jcxz inside_Loop_Done
	jmp inside_Loop
inside_Loop_Done:
	pop cx
	dec cx
	inc edx
	cmp cx, 0
	jz no_special
	jmp outer_Loop

;==============Copy Password====================
copy:
pop cx
xor edx, edx
pop dx
cmp dl, 3
je copy_to_Old_Old
cmp dl, 2
je copy_to_Old_Old_Old
cmp dl, 1
je copy_to_Old_Old_Old_Old

copy_to_Old:
    mov esi, offset user_password
    mov edi, offset old_old_old_user_password
    mov cl, password_length
copying_Loop_1:
    mov ebx, [esi * 1]
    mov [edi], bl
    inc esi
    inc edi
    dec cl
	cmp cl, 0
    jz copy_done
    jmp Copying_Loop_1

copy_to_Old_Old:
    mov esi, offset user_password
    mov edi, offset old_old_user_password
    mov cl, password_length
copying_Loop_2:
    mov ebx, [esi * 1]
    mov [edi], bl
    inc esi
    inc edi
    dec cl
	cmp cl, 0
    jz identical
    jmp Copying_Loop_2

copy_to_Old_Old_Old:
    mov esi, offset user_password
    mov edi, offset old_user_password
    mov cl, password_length
copying_Loop_3:
    mov ebx, [esi * 1]
    mov [edi], bl
    inc esi
    inc edi
    dec cl
	cmp cl, 0
    jz identical
    jmp Copying_Loop_3

copy_to_Old_Old_Old_Old:
    mov esi, offset user_password
    mov edi, offset gold_user_password
    mov cl, password_length
copying_Loop_4:
    mov ebx, [esi * 1]
    mov [edi], bl
    inc esi
    inc edi
    dec cl
	cmp cl, 0
    jz identical
    jmp Copying_Loop_4

copy_done:
dec dx
cmp dl, 0
jz endgame
jmp main_outer_loop
;==============Identical Password===============
identical:
	push dx
	xor eax, eax
	xor ebx, ebx
	mov edi, offset old_old_old_user_password
	mov esi, offset user_password
	mov cl, password_length
identical_loop:
	mov ebx, [esi]
	mov eax, [edi]
	cmp al, bl
	jne identical_2
	inc esi
	inc edi
	dec cl
	cmp cl, 0
	jz redo
	jmp identical_loop

identical_2:
	cmp dl, 3
	je copy_done
	xor edi, edi
	xor esi, esi
	xor eax, eax
	xor ebx, ebx
	mov edi, offset old_old_user_password
	mov esi, offset user_password
	mov cl, password_length
identical_loop_2:
	mov ebx, [esi]
	mov eax, [edi]
	cmp al, bl
	jne identical_3
	inc esi
	inc edi
	dec cl
	jcxz redo
	jmp identical_loop_2

identical_3:
	cmp dl, 2
	je copy_done
	xor edi, edi
	xor esi, esi
	xor eax, eax
	xor ebx, ebx
	mov edi, offset old_user_password
	mov esi, offset user_password
	mov cl, password_length
identical_loop_3:
	mov ebx, [esi]
	mov eax, [edi]
	cmp al, bl
	jne copy_done
	inc esi
	inc edi
	dec cl
	jcxz redo
	jmp identical_loop_3

identical_4:
	cmp dl, 1
	je copy_done
	xor edi, edi
	xor esi, esi
	xor eax, eax
	xor ebx, ebx
	mov edi, offset gold_user_password
	mov esi, offset user_password
	mov cl, password_length
identical_loop_4:
	mov ebx, [esi]
	mov eax, [edi]
	cmp al, bl
	jne copy_done
	inc esi
	inc edi
	dec cl
	jcxz redo
	jmp identical_loop_4

redo:
mov edx, offset Redo_msg
call writestring
call crlf
pop dx
jmp main_outer_loop

endgame:
mov edx, offset Test_msg
call writestring
invoke ExitProcess, 0 

;==============Identical Password===============
matching_pass:
	mov edx, offset Test_msg
	call writestring
	invoke ExitProcess, 0 

main ENDP

END main